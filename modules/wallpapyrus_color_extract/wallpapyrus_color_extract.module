<?php

require 'vendor/autoload.php';

require 'lib/Color.php';
require 'lib/SafePalette.php';

// use League\ColorExtractor\Color;
use League\ColorExtractor\ColorExtractor;
use League\ColorExtractor\Palette;

/**
 * Implements hook_node_presave().
 */
function wallpapyrus_color_extract_node_presave($node) {

  // get image field from node
  if ($node->type !== 'wallpaper') return;
  $fid = $node->field_image_wallpaper[LANGUAGE_NONE][0]['fid'];

  // load image file
  $image_file = file_load($fid);
  $url = drupal_realpath($image_file->uri);

  if (!empty($url)) {

    // get safe colors palette
    $palette = Palette::fromFilename($url);

    // an extractor is built from a palette
    $extractor = new ColorExtractor($palette);

    // it defines an extract method which return the most representative colors
    $data = $palette->getMostUsedColors(5);

    // get safe colors palette
    $color = new Color;
    $palette = new SafePalette;
    $safe = $palette->getSafe();

    $i = 0;
    foreach ($data as $row) {

      // find closest safe color
      $source = $color->fromHex($row);
      $match = $source->getClosestMatch($safe);
      $result = ("#" . substr("000000" . dechex($safe[$match]), -6));

      // check if term already exists
      $term = taxonomy_get_term_by_name($result);
      $vobj = taxonomy_vocabulary_machine_name_load('colors');

      // create new term if necessary
      if ($term == array()) {
        $taxonomy = new stdClass();
        $taxonomy->name = $result;
        $taxonomy->vid = $vobj->vid;

        taxonomy_term_save($taxonomy);
        $term = taxonomy_get_term_by_name($result);
      }

      $tid = key($term);

      // fill node color field
      $node->field_term_colors[LANGUAGE_NONE][$i] = array(
        'tid' => $tid,
        'vid' => $vobj->vid,
        'name' => $result
      );

      $i++;
    }
  }
}

